eg:source test.c;

标准编译流程(4步)
1.预处理(可以输出test.i文件中存放着test.c经预处理之后的代码)
gcc -E test.c -o test.i

2.编译为汇编代码(Compilation)
gcc -S test.i -o test.s 或 gcc -S test.i

3.汇编(Assembly)
gcc -c test.s -o test.o 或 gcc -c test.s

4.连接(Linking)
gcc test.o -o test


gcc命令是智能的
gcc 会智能执行源文件与目标文件之间的流程.
如gcc test.c -o test会自动执行1,2,3,4
如gcc -c test.c -o test.o会自动执行1,2,3
如gcc test.i -o test会自动执行3,4


编译动态库
gcc test.c -fPIC -shared -o libtest.so
参数说明
-shared 该选项指定生成动态连接库（让连接器生成T类型的导出符号表，有时候也生成弱连接W类型的导出符号），不用该标志外部程序无法连接。相当于一个可执行文件.
-fPIC：表示编译为位置独立的代码，不用此选项的话编译后的代码是位置相关的所以动态载入时是通过代码拷贝的方式来满足不同进程的需要，而不能达到真正代码段共享的目的.


编译(运行时)依赖动态库(动态库编译时在当前目录,运行时在系统目录)的可执行文件
gcc test.c -L. -ltest -o test
参数说明
-L.：表示要连接的库在当前目录中(-L./lib：表示要连接的库在当前目录中下的lib中)
-ltest：编译器查找动态连接库时有隐含的命名规则，即在给出的名字前面加上lib，后面加上.so来确定库的名称


编译(运行时)依赖动态库(动态库编译时在当前目录,运行时在当前目录)的可执行文件
gcc test.c -L. -ltest -Wl,rpath=./ -o test
gcc test.c -L. -ltest -Wl,rpath,./ -o test(作用同上)
参数说明:
-Wl选项告诉编译器将后面的参数传递给链接器
-Wl,rpath=./选项告诉编译器将rpath=./传递给链接器(即运行时从可执行文件所在目录查找so)(多个路径用:分割)(这里的=可用,替换)

指定头文件位置
gcc -I./ test.c -o test
参数说明-I 头文件位置



查看可执行文件(或so库的依赖)
ldd test  (ldd libtest.so)


C++编译将gcc改为g++即可

